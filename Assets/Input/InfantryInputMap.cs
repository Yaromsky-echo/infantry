//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InfantryInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InfantryInputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InfantryInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InfantryInputMap"",
    ""maps"": [
        {
            ""name"": ""Infantry"",
            ""id"": ""c2fabcc1-a9c3-4b21-8a7e-613722ebebb5"",
            ""actions"": [
                {
                    ""name"": ""PrimaryMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""0600f4f5-e479-465c-9181-7d4e85b0d89c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""ab9b47ce-a774-4933-804f-927559eaf1c1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PreviousWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""993c2c45-848d-4bd4-8b1e-c3abb1594a62"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d481a8ce-0d57-4aca-87bc-008e3292ef3f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a888a361-a19b-4ecc-ae84-68bef5d81a34"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbc5f073-0a2b-407b-96db-d6e129a17940"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Infantry
        m_Infantry = asset.FindActionMap("Infantry", throwIfNotFound: true);
        m_Infantry_PrimaryMouseClick = m_Infantry.FindAction("PrimaryMouseClick", throwIfNotFound: true);
        m_Infantry_NextWeapon = m_Infantry.FindAction("NextWeapon", throwIfNotFound: true);
        m_Infantry_PreviousWeapon = m_Infantry.FindAction("PreviousWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Infantry
    private readonly InputActionMap m_Infantry;
    private List<IInfantryActions> m_InfantryActionsCallbackInterfaces = new List<IInfantryActions>();
    private readonly InputAction m_Infantry_PrimaryMouseClick;
    private readonly InputAction m_Infantry_NextWeapon;
    private readonly InputAction m_Infantry_PreviousWeapon;
    public struct InfantryActions
    {
        private @InfantryInputMap m_Wrapper;
        public InfantryActions(@InfantryInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryMouseClick => m_Wrapper.m_Infantry_PrimaryMouseClick;
        public InputAction @NextWeapon => m_Wrapper.m_Infantry_NextWeapon;
        public InputAction @PreviousWeapon => m_Wrapper.m_Infantry_PreviousWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Infantry; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InfantryActions set) { return set.Get(); }
        public void AddCallbacks(IInfantryActions instance)
        {
            if (instance == null || m_Wrapper.m_InfantryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InfantryActionsCallbackInterfaces.Add(instance);
            @PrimaryMouseClick.started += instance.OnPrimaryMouseClick;
            @PrimaryMouseClick.performed += instance.OnPrimaryMouseClick;
            @PrimaryMouseClick.canceled += instance.OnPrimaryMouseClick;
            @NextWeapon.started += instance.OnNextWeapon;
            @NextWeapon.performed += instance.OnNextWeapon;
            @NextWeapon.canceled += instance.OnNextWeapon;
            @PreviousWeapon.started += instance.OnPreviousWeapon;
            @PreviousWeapon.performed += instance.OnPreviousWeapon;
            @PreviousWeapon.canceled += instance.OnPreviousWeapon;
        }

        private void UnregisterCallbacks(IInfantryActions instance)
        {
            @PrimaryMouseClick.started -= instance.OnPrimaryMouseClick;
            @PrimaryMouseClick.performed -= instance.OnPrimaryMouseClick;
            @PrimaryMouseClick.canceled -= instance.OnPrimaryMouseClick;
            @NextWeapon.started -= instance.OnNextWeapon;
            @NextWeapon.performed -= instance.OnNextWeapon;
            @NextWeapon.canceled -= instance.OnNextWeapon;
            @PreviousWeapon.started -= instance.OnPreviousWeapon;
            @PreviousWeapon.performed -= instance.OnPreviousWeapon;
            @PreviousWeapon.canceled -= instance.OnPreviousWeapon;
        }

        public void RemoveCallbacks(IInfantryActions instance)
        {
            if (m_Wrapper.m_InfantryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInfantryActions instance)
        {
            foreach (var item in m_Wrapper.m_InfantryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InfantryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InfantryActions @Infantry => new InfantryActions(this);
    public interface IInfantryActions
    {
        void OnPrimaryMouseClick(InputAction.CallbackContext context);
        void OnNextWeapon(InputAction.CallbackContext context);
        void OnPreviousWeapon(InputAction.CallbackContext context);
    }
}
